{"version":3,"sources":["../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/components/FileUpload.js","../../src/components/MultipleFilesUpload.js","../../src/components/FolderUpload.js","../../src/components/ImageUpload.js","../../src/components/PdfUpload.js","../../src/components/TextUpload.js","components/ExampleTabs.js","components/Navigation.js","App.js","index.js"],"names":["Symbol","iterator","asyncIterator","_catch","body","recover","result","e","then","ipfs","ipfsHttpClient","FileUpload","setUrl","useState","file","setFile","fileUrl","setFileUrl","loading","setLoading","uploaded","setUploaded","onSubmit","url","added","console","Form","required","type","onChange","preUpload","className","animated","now","pill","href","target","rel","fileAndUploadButton","all","require","MultipleFilesUpload","files","setFiles","filesUrl","setFilesUrl","fileObjectsArray","Array","path","content","wrapWithDirectory","uploadFiles","FilesUrl","results","multiple","ListGroup","as","filesAndUploadButton","FolderUpload","folderUrl","setFolderUrl","webkitdirectory","ImageUpload","image","setImage","imagePreview","setImagePreview","accept","src","URL","createPreview","style","height","thumbnail","previewAndUploadButton","PdfUpload","pdf","setPdf","pdfPreview","setPdfPreview","s","width","TextUpload","text","setText","textUrl","setTextUrl","uploadText","uploadButtonLoading","readOnly","rows","ExampleTabs","multipleFilesUrl","setMultipleFilesUrl","imageUrl","setImageUrl","pdfUrl","setPdfUrl","Container","Tabs","defaultActiveKey","Tab","eventKey","title","border","borderRadius","overflow","allow","sandbox","Navigation","Navbar","bg","variant","Brand","Nav","Link","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9901258c.chunk.js","sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import React, { useState } from 'react'\r\nimport { Form, Button, Badge, ProgressBar, Container } from 'react-bootstrap'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport const FileUpload = ({ setUrl }) => {\r\n    const [file, setFile] = useState({})\r\n    const [fileUrl, setFileUrl] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const uploadFile = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const added = await ipfs.add(file)\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            setUrl(url)\r\n            setFileUrl(url)\r\n            setUploaded(true)\r\n        } catch (err) {\r\n            console.log('Error uploading the file : ', err)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    const preUpload = (e) => {\r\n        if (e.target.value !== '') {\r\n            setFile(e.target.files[0])\r\n        } else {\r\n            setFile({})\r\n        }\r\n    }\r\n\r\n    const fileAndUploadButton = () => {\r\n        if (file.name) {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        <h5>\r\n                            {file.name} <Badge pill>{file.size} kb</Badge>\r\n                        </h5>\r\n\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={fileUrl}\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    File\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅\r\n                            </h5>\r\n                        ) : (\r\n                            <Button type='submit'>Upload File</Button>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading File</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={uploadFile}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    onChange={(e) => preUpload(e)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {fileAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nimport {\r\n    Form,\r\n    ListGroup,\r\n    Badge,\r\n    Button,\r\n    ProgressBar,\r\n    Container\r\n} from 'react-bootstrap'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\nconst all = require('it-all')\r\n\r\nexport const MultipleFilesUpload = ({ setUrl }) => {\r\n    const [files, setFiles] = useState([])\r\n    const [filesUrl, setFilesUrl] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const uploadFiles = async () => {\r\n        let fileObjectsArray = Array.from(files).map((file) => {\r\n            return {\r\n                path: file.name,\r\n                content: file\r\n            }\r\n        })\r\n\r\n        const results = await all(\r\n            ipfs.addAll(fileObjectsArray, { wrapWithDirectory: true })\r\n        )\r\n\r\n        console.log(results)\r\n        return results\r\n    }\r\n\r\n    const returnFilesUrl = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        const results = await uploadFiles(files)\r\n        const length = results.length\r\n        const FilesHash = results[length - 1].cid._baseCache.get('z')\r\n        const FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash\r\n        setUrl(FilesUrl)\r\n        setFilesUrl(FilesUrl)\r\n        setLoading(false)\r\n        setUploaded(true)\r\n    }\r\n\r\n    const filesAndUploadButton = () => {\r\n        if (files.length !== 0) {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={filesUrl}\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    Files\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅\r\n                            </h5>\r\n                        ) : (\r\n                            <div>\r\n                                <Button className='mb-3' type='submit'>\r\n                                    Upload Files\r\n                                </Button>\r\n\r\n                                <ListGroup className='mb-3'>\r\n                                    {Array.from(files).map((file) => {\r\n                                        return (\r\n                                            <ListGroup.Item\r\n                                                as='li'\r\n                                                className='d-flex justify-content-between align-items-start'\r\n                                            >\r\n                                                <div className='ms-2 me-auto'>\r\n                                                    {file.name}\r\n                                                </div>\r\n                                                <Badge pill>\r\n                                                    {file.size} kb\r\n                                                </Badge>\r\n                                            </ListGroup.Item>\r\n                                        )\r\n                                    })}\r\n                                </ListGroup>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading Files</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={returnFilesUrl}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    multiple\r\n                    onChange={(e) => setFiles(e.target.files)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {filesAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nimport {\r\n    Form,\r\n    ListGroup,\r\n    Badge,\r\n    Button,\r\n    ProgressBar,\r\n    Container\r\n} from 'react-bootstrap'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\nconst all = require('it-all')\r\n\r\nexport const FolderUpload = ({ setUrl }) => {\r\n    const [files, setFiles] = useState([])\r\n    const [folderUrl, setFolderUrl] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const uploadFiles = async () => {\r\n        let fileObjectsArray = Array.from(files).map((file) => {\r\n            return {\r\n                path: file.name,\r\n                content: file\r\n            }\r\n        })\r\n\r\n        const results = await all(\r\n            ipfs.addAll(fileObjectsArray, { wrapWithDirectory: true })\r\n        )\r\n\r\n        console.log(results)\r\n        return results\r\n    }\r\n\r\n    const returnFilesUrl = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        const results = await uploadFiles(files)\r\n        const length = results.length\r\n        const FilesHash = results[length - 1].cid._baseCache.get('z')\r\n        const FilesUrl = 'https://ipfs.infura.io/ipfs/' + FilesHash\r\n        console.log(FilesUrl)\r\n        setUrl(FilesUrl)\r\n        setFolderUrl(FilesUrl)\r\n        setLoading(false)\r\n        setUploaded(true)\r\n    }\r\n\r\n    const filesAndUploadButton = () => {\r\n        if (files.length !== 0) {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={folderUrl}\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    Folder\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅\r\n                            </h5>\r\n                        ) : (\r\n                            <div>\r\n                                <Button type='submit' className='mb-3'>\r\n                                    Upload Folder\r\n                                </Button>\r\n\r\n                                <ListGroup className='mb-3'>\r\n                                    {Array.from(files).map((file) => {\r\n                                        return (\r\n                                            <ListGroup.Item\r\n                                                as='li'\r\n                                                className='d-flex justify-content-between align-items-start'\r\n                                            >\r\n                                                <div className='ms-2 me-auto'>\r\n                                                    {file.name}\r\n                                                </div>\r\n                                                <Badge pill>\r\n                                                    {file.size} kb\r\n                                                </Badge>\r\n                                            </ListGroup.Item>\r\n                                        )\r\n                                    })}\r\n                                </ListGroup>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading Folder</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={returnFilesUrl}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    webkitdirectory='true'\r\n                    multiple\r\n                    onChange={(e) => setFiles(e.target.files)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {filesAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport {\r\n    Form,\r\n    Image,\r\n    Button,\r\n    ProgressBar,\r\n    Container,\r\n    Badge\r\n} from 'react-bootstrap'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport const ImageUpload = ({ setUrl }) => {\r\n    const [image, setImage] = useState({})\r\n    const [imagePreview, setImagePreview] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const createPreview = (e) => {\r\n        if (e.target.value !== '') {\r\n            setImage(e.target.files[0])\r\n            const src = URL.createObjectURL(e.target.files[0])\r\n            setImagePreview(src)\r\n        } else {\r\n            setImagePreview('')\r\n        }\r\n    }\r\n\r\n    const uploadFile = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const added = await ipfs.add(image)\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            setUrl(url)\r\n            setImagePreview(url)\r\n            setUploaded(true)\r\n        } catch (err) {\r\n            console.log('Error uploading the file : ', err)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    const previewAndUploadButton = () => {\r\n        if (imagePreview !== '') {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={imagePreview}\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    Image\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅{' '}\r\n                            </h5>\r\n                        ) : (\r\n                            <div>\r\n                                <Button type='submit' className='mb-3'>\r\n                                    Upload Image\r\n                                </Button>\r\n                                <br />\r\n                                <h5>\r\n                                    {image.name}{' '}\r\n                                    <Badge pill>{image.size} kb</Badge>\r\n                                </h5>\r\n\r\n                                <Image\r\n                                    style={{ height: '300px' }}\r\n                                    className='mb-3'\r\n                                    src={imagePreview}\r\n                                    thumbnail\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading Image</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={uploadFile}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    accept='image/*'\r\n                    onChange={(e) => createPreview(e)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {previewAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Form, Button, ProgressBar, Container, Badge } from 'react-bootstrap'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport const PdfUpload = ({ setUrl }) => {\r\n    const [pdf, setPdf] = useState({})\r\n    const [pdfPreview, setPdfPreview] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n\r\n    const createPreview = (e) => {\r\n        if (e.target.value !== '') {\r\n            setPdf(e.target.files[0])\r\n            const src = URL.createObjectURL(e.target.files[0])\r\n            setPdfPreview(src)\r\n        } else {\r\n            setPdfPreview('')\r\n        }\r\n    }\r\n\r\n    const uploadFile = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const added = await ipfs.add(pdf)\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            setPdfPreview(url)\r\n            setUrl(url)\r\n            setUploaded(true)\r\n        } catch (err) {\r\n            console.log('Error uploading the file : ', err)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    const previewAndUploadButton = () => {\r\n        if (pdfPreview !== '') {\r\n            if (!loading) {\r\n                return (\r\n                    <div>\r\n                        {uploaded ? (\r\n                            <h5>\r\n                                ✅{' '}\r\n                                <a\r\n                                    href={pdfPreview}\r\n                                    s\r\n                                    target='_blank'\r\n                                    rel='noopener noreferrer'\r\n                                >\r\n                                    PDF\r\n                                </a>{' '}\r\n                                Uploaded Successfully ✅\r\n                            </h5>\r\n                        ) : (\r\n                            <div>\r\n                                <Button type='submit' className='mb-3'>\r\n                                    Upload PDF\r\n                                </Button>\r\n                                <br />\r\n                                <h5>\r\n                                    {pdf.name} <Badge pill>{pdf.size} kb</Badge>\r\n                                </h5>\r\n\r\n                                <embed\r\n                                    width='75%'\r\n                                    height='400px'\r\n                                    className='mb-3'\r\n                                    src={pdfPreview}\r\n                                ></embed>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading PDF</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={uploadFile}>\r\n                <Form.Control\r\n                    required\r\n                    type='file'\r\n                    accept='application/pdf'\r\n                    onChange={(e) => createPreview(e)}\r\n                    className='mb-3'\r\n                />\r\n\r\n                {previewAndUploadButton()}\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Form, Button, ProgressBar, Container } from 'react-bootstrap'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nconst ipfs = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport const TextUpload = ({ setUrl }) => {\r\n    const [text, setText] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [uploaded, setUploaded] = useState(false)\r\n    const [textUrl, setTextUrl] = useState('')\r\n\r\n    const uploadText = async (e) => {\r\n        setLoading(true)\r\n        e.preventDefault()\r\n\r\n        try {\r\n            const added = await ipfs.add(text)\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            setTextUrl(url)\r\n            setUrl(url)\r\n            setUploaded(true)\r\n        } catch (err) {\r\n            console.log('Error uploading the file : ', err)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    const uploadButtonLoading = () => {\r\n        if (text === '') return\r\n\r\n        if (uploaded) {\r\n            return (\r\n                <h5>\r\n                    ✅{' '}\r\n                    <a href={textUrl} target='_blank' rel='noopener noreferrer'>\r\n                        Text\r\n                    </a>{' '}\r\n                    Uploaded Successfully ✅\r\n                </h5>\r\n            )\r\n        } else {\r\n            if (loading) {\r\n                return (\r\n                    <Container>\r\n                        <h4>Uploading Text</h4>\r\n                        <ProgressBar animated now={100} />\r\n                        <h4>Please Wait ...</h4>\r\n                    </Container>\r\n                )\r\n            } else {\r\n                return <Button type='submit'>Upload Text</Button>\r\n            }\r\n        }\r\n    }\r\n\r\n    const textForm = () => {\r\n        if (loading || uploaded) {\r\n            return (\r\n                <Form>\r\n                    <Form.Group className='mb-3'>\r\n                        <Form.Label>Enter the Text :</Form.Label>\r\n\r\n                        <Form.Control\r\n                            onChange={(e) => setText(e.target.value)}\r\n                            readOnly\r\n                            as='textarea'\r\n                            rows={3}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    {uploadButtonLoading()}\r\n                </Form>\r\n            )\r\n        } else {\r\n            return (\r\n                <Form onSubmit={uploadText}>\r\n                    <Form.Group className='mb-3'>\r\n                        <Form.Label>Enter the Text :</Form.Label>\r\n\r\n                        <Form.Control\r\n                            onChange={(e) => setText(e.target.value)}\r\n                            required\r\n                            as='textarea'\r\n                            rows={3}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    {uploadButtonLoading()}\r\n                </Form>\r\n            )\r\n        }\r\n    }\r\n\r\n    return <div>{textForm()}</div>\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Container, Tabs, Tab } from 'react-bootstrap'\r\nimport {\r\n    FileUpload,\r\n    MultipleFilesUpload,\r\n    FolderUpload,\r\n    ImageUpload,\r\n    PdfUpload,\r\n    TextUpload\r\n} from 'react-ipfs-uploader'\r\n\r\nexport const ExampleTabs = () => {\r\n    const [fileUrl, setFileUrl] = useState('')\r\n    const [multipleFilesUrl, setMultipleFilesUrl] = useState('')\r\n    const [folderUrl, setFolderUrl] = useState('')\r\n    const [imageUrl, setImageUrl] = useState('')\r\n    const [pdfUrl, setPdfUrl] = useState('')\r\n    const [textUrl, setTextUrl] = useState('')\r\n\r\n    return (\r\n        <Container>\r\n            <Tabs defaultActiveKey='FileUpload' className='mb-3'>\r\n                <Tab eventKey='FileUpload' title='FileUpload'>\r\n                    <h5>\r\n                        FileUpload : Displays the Name and Size of the selected\r\n                        File and returns the URL after uploading .\r\n                    </h5>\r\n\r\n                    <FileUpload setUrl={setFileUrl} />\r\n\r\n                    <h5>\r\n                        FileUrl :{' '}\r\n                        <a\r\n                            href={fileUrl}\r\n                            target='_blank'\r\n                            rel='noopener noreferrer'\r\n                        >\r\n                            {fileUrl}\r\n                        </a>\r\n                    </h5>\r\n\r\n                    <hr />\r\n\r\n                    <iframe\r\n                        src='https://codesandbox.io/embed/fileupload-81g84?fontsize=14&hidenavigation=1&theme=dark'\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '500px',\r\n                            border: '0',\r\n                            borderRadius: '4px',\r\n                            overflow: 'hidden'\r\n                        }}\r\n                        title='FileUpload'\r\n                        allow='accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking'\r\n                        sandbox='allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts'\r\n                    ></iframe>\r\n                </Tab>\r\n\r\n                <Tab eventKey='MultipleFilesUpload' title='MultipleFilesUpload'>\r\n                    <h5>\r\n                        MultipleFilesUpload : Displays a list with Name and Size\r\n                        of every selected File and returns the URL after\r\n                        uploading .\r\n                    </h5>\r\n\r\n                    <MultipleFilesUpload setUrl={setMultipleFilesUrl} />\r\n\r\n                    <h5>\r\n                        MultipleFilesUpload :{' '}\r\n                        <a\r\n                            href={multipleFilesUrl}\r\n                            target='_blank'\r\n                            rel='noopener noreferrer'\r\n                        >\r\n                            {multipleFilesUrl}\r\n                        </a>\r\n                    </h5>\r\n\r\n                    <hr />\r\n\r\n                    <iframe\r\n                        src='https://codesandbox.io/embed/multiplefilesupload-uf6yw?fontsize=14&hidenavigation=1&theme=dark'\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '500px',\r\n                            border: '0',\r\n                            borderRadius: '4px',\r\n                            overflow: 'hidden'\r\n                        }}\r\n                        title='MultipleFilesUpload'\r\n                        allow='accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking'\r\n                        sandbox='allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts'\r\n                    ></iframe>\r\n                </Tab>\r\n\r\n                <Tab eventKey='FolderUpload' title='FolderUpload'>\r\n                    <h5>\r\n                        FolderUpload : Displays a list with Name and Size of\r\n                        every File in the selected Folder and returns the URL\r\n                        after uploading .\r\n                    </h5>\r\n\r\n                    <FolderUpload setUrl={setFolderUrl} />\r\n\r\n                    <h5>\r\n                        FolderUrl :{' '}\r\n                        <a\r\n                            href={folderUrl}\r\n                            target='_blank'\r\n                            rel='noopener noreferrer'\r\n                        >\r\n                            {folderUrl}\r\n                        </a>\r\n                    </h5>\r\n\r\n                    <hr />\r\n\r\n                    <iframe\r\n                        src='https://codesandbox.io/embed/folderupload-y6j2b?fontsize=14&hidenavigation=1&theme=dark'\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '500px',\r\n                            border: '0',\r\n                            borderRadius: '4px',\r\n                            overflow: 'hidden'\r\n                        }}\r\n                        title='FolderUpload'\r\n                        allow='accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking'\r\n                        sandbox='allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts'\r\n                    ></iframe>\r\n                </Tab>\r\n\r\n                <Tab eventKey='ImageUpload' title='ImageUpload'>\r\n                    <h5>\r\n                        ImageUpload : Shows the user a preview of the selected\r\n                        Image and returns the URL after uploading .\r\n                    </h5>\r\n\r\n                    <ImageUpload setUrl={setImageUrl} />\r\n\r\n                    <h5>\r\n                        ImageUrl :{' '}\r\n                        <a\r\n                            href={imageUrl}\r\n                            target='_blank'\r\n                            rel='noopener noreferrer'\r\n                        >\r\n                            {imageUrl}\r\n                        </a>\r\n                    </h5>\r\n\r\n                    <hr />\r\n\r\n                    <iframe\r\n                        src='https://codesandbox.io/embed/imageupload-65kpl?fontsize=14&hidenavigation=1&theme=dark'\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '500px',\r\n                            border: '0',\r\n                            borderRadius: '4px',\r\n                            overflow: 'hidden'\r\n                        }}\r\n                        title='ImageUpload'\r\n                        allow='accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking'\r\n                        sandbox='allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts'\r\n                    ></iframe>\r\n                </Tab>\r\n\r\n                <Tab eventKey='PdfUpload' title='PdfUpload'>\r\n                    <h5>\r\n                        PdfUpload : Shows the user a preview of the selected PDF\r\n                        and returns the URL after uploading .\r\n                    </h5>\r\n\r\n                    <PdfUpload setUrl={setPdfUrl} />\r\n\r\n                    <h5>\r\n                        PdfUrl :{' '}\r\n                        <a\r\n                            href={pdfUrl}\r\n                            target='_blank'\r\n                            rel='noopener noreferrer'\r\n                        >\r\n                            {pdfUrl}\r\n                        </a>\r\n                    </h5>\r\n\r\n                    <hr />\r\n\r\n                    <iframe\r\n                        src='https://codesandbox.io/embed/pdfupload-ce4ch?fontsize=14&hidenavigation=1&theme=dark'\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '500px',\r\n                            border: '0',\r\n                            borderRadius: '4px',\r\n                            overflow: 'hidden'\r\n                        }}\r\n                        title='PdfUpload'\r\n                        allow='accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking'\r\n                        sandbox='allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts'\r\n                    ></iframe>\r\n                </Tab>\r\n\r\n                <Tab eventKey='TextUpload' title='TextUpload'>\r\n                    <h5>\r\n                        TextUpload : Returns the URL of the Text after uploading\r\n                        .\r\n                    </h5>\r\n\r\n                    <TextUpload setUrl={setTextUrl} />\r\n\r\n                    <h5>\r\n                        TextUrl :{' '}\r\n                        <a\r\n                            href={textUrl}\r\n                            target='_blank'\r\n                            rel='noopener noreferrer'\r\n                        >\r\n                            {textUrl}\r\n                        </a>\r\n                    </h5>\r\n\r\n                    <hr />\r\n\r\n                    <iframe\r\n                        src='https://codesandbox.io/embed/textupload-vpcst?fontsize=14&hidenavigation=1&theme=dark'\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '500px',\r\n                            border: '0',\r\n                            borderRadius: '4px',\r\n                            overflow: 'hidden'\r\n                        }}\r\n                        title='TextUpload'\r\n                        allow='accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking'\r\n                        sandbox='allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts'\r\n                    ></iframe>\r\n                </Tab>\r\n            </Tabs>\r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Container, Navbar, Nav } from 'react-bootstrap'\r\n\r\nexport const Navigation = () => {\r\n    return (\r\n        <div>\r\n            <Navbar bg='dark' variant='dark'>\r\n                <Container>\r\n                    <Navbar.Brand\r\n                        href='https://www.npmjs.com/package/react-ipfs-uploader'\r\n                        target='_blank'\r\n                        rel='noopener noreferrer'\r\n                    >\r\n                        react-ipfs-uploader\r\n                    </Navbar.Brand>\r\n\r\n                    <Nav>\r\n                        <Nav.Link\r\n                            href='https://www.npmjs.com/package/react-ipfs-uploader'\r\n                            target='_blank'\r\n                            rel='noopener noreferrer'\r\n                        >\r\n                            NPM Package\r\n                        </Nav.Link>\r\n\r\n                        <Nav.Link\r\n                            href='https://discord.gg/bgY4TZecVu'\r\n                            target='_blank'\r\n                            rel='noopener noreferrer'\r\n                        >\r\n                            Developer Chat\r\n                        </Nav.Link>\r\n\r\n                        <Nav.Link\r\n                            href='https://github.com/yash-deore/react-ipfs-uploader'\r\n                            target='_blank'\r\n                            rel='noopener noreferrer'\r\n                        >\r\n                            Github Repository\r\n                        </Nav.Link>\r\n\r\n                        <Nav.Link\r\n                            href='https://github.com/yash-deore'\r\n                            target='_blank'\r\n                            rel='noopener noreferrer'\r\n                        >\r\n                            My GitHub\r\n                        </Nav.Link>\r\n                    </Nav>\r\n                </Container>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\nimport { ExampleTabs } from './components/ExampleTabs'\nimport { Navigation } from './components/Navigation'\n\nconst App = () => {\n    return (\n        <div>\n            <Navigation />\n            <br />\n            <ExampleTabs />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}